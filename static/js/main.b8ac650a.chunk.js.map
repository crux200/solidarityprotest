{"version":3,"sources":["Components/MainMenu/MainMenu.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","props","className","id","item","text","onClick","handleClick","toUpperCase","MenuContainer","state","activeItem","activeItemPosition","activeItemColor","menuItems","bind","e","preventDefault","setState","document","getElementById","offsetTop","window","getComputedStyle","getPropertyValue","this","map","style","top","backgroundColor","React","Component","App","class","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAiDE,SAASA,EAASC,GAChB,OACE,yBACEC,UAAU,YACVC,GAAKF,EAAMG,KAAKC,KAChBC,QAAUL,EAAMM,YAAYN,EAAMG,KAAKC,OAErCJ,EAAMG,KAAKC,KAAKG,eAKTC,M,YAzDb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAEDS,MAAQ,CACXC,WAAY,GACZC,mBAAoB,EACpBC,gBAAiB,GACjBC,UAAW,CACT,CAAET,KAAM,QACR,CAAEA,KAAM,uBACR,CAAEA,KAAM,SACR,CAAEA,KAAM,QACR,CAAEA,KAAM,aAIZ,EAAKE,YAAc,EAAKA,YAAYQ,KAAjB,gBAhBF,E,yEAmBPJ,GAAa,IAAD,OACtB,OAAO,SAAAK,GACLA,EAAEC,iBAEF,EAAKC,SAAS,CACZP,aACAC,mBAAoBO,SAASC,eAAeT,GAAYU,UACxDR,gBAAiBS,OAAOC,iBAAiBJ,SAASC,eAAeT,IAAaa,iBAAiB,yB,+BAK3F,IAAD,OACDV,EAAYW,KAAKf,MAAMI,UAAUY,KAAI,SAAAtB,GAAI,OAAI,kBAACJ,EAAD,CAAUI,KAAOA,EAAOG,YAAc,EAAKA,iBAC9F,OACE,yBAAKL,UAAU,kBACb,0BAAMA,UAAU,oBAAoByB,MAAO,CAAEC,IAAKH,KAAKf,MAAME,mBAAoBiB,gBAAiBJ,KAAKf,MAAMG,mBAC3GC,O,GArCgBgB,IAAMC,WCiBnBC,G,uLAZb,OACE,yBAAKC,MAAO,YACd,yBAAKA,MAAM,UACP,oFACG,uEAEH,kBAAC,EAAD,W,GARYF,cCMEG,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD4H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b8ac650a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './MainMenu.css'\r\n\r\nclass MenuContainer extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      \r\n      this.state = {\r\n        activeItem: '',\r\n        activeItemPosition: 0,\r\n        activeItemColor: '',\r\n        menuItems: [\r\n          { text: 'Home' },\r\n          { text: 'Solidarity Messages' },\r\n          { text: 'About' },\r\n          { text: 'Blog' },\r\n          { text: 'Contact' },\r\n        ],\r\n      }\r\n      \r\n      this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    \r\n    handleClick(activeItem) {\r\n      return e => {\r\n        e.preventDefault()\r\n      \r\n        this.setState({\r\n          activeItem,\r\n          activeItemPosition: document.getElementById(activeItem).offsetTop,\r\n          activeItemColor: window.getComputedStyle(document.getElementById(activeItem)).getPropertyValue('background-color'),\r\n        })\r\n      }\r\n    }\r\n    \r\n    render() {\r\n      const menuItems = this.state.menuItems.map(item => <MenuItem item={ item } handleClick={ this.handleClick }/>)\r\n      return (\r\n        <div className='menu-container'>\r\n          <span className='menu-item--active' style={{ top: this.state.activeItemPosition, backgroundColor: this.state.activeItemColor }}/>\r\n          { menuItems }\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  ///////////////////\r\n  // MenuItem      //\r\n  ///////////////////\r\n  function MenuItem(props) {\r\n    return (\r\n      <div \r\n        className='menu-item'\r\n        id={ props.item.text }\r\n        onClick={ props.handleClick(props.item.text) }\r\n      >\r\n        { props.item.text.toUpperCase() }\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default MenuContainer","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport MenuItem from './Components/MainMenu/MainMenu';\nimport './App.css';\nimport MenuContainer from './Components/MainMenu/MainMenu';\n\nclass App extends Component{\n  render(){\n  return( \n    <div class= 'MainMenu'> \n  <div class='Header'>\n      <p> Thank you for visiting the Solidarity Protest site. </p>\n         <p>Please stay tuned for more updates.... </p>\n   </div> \n      <MenuContainer />\n   </div>\n  )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}